include(AddFileDependencies)
include (CGAL_Macros)

#Tells if category has changed to become true
function(is_rising_edge category res)
  #if category_prec is not defined, take the init value
  if(DEFINED ${category}_prec)
    set(prec_value ${${category}_prec})
  elseif(${category} EQUAL "CATEGORY_PLUGINS_all")
    set(prec_value TRUE)
  else()
    set(prec_value FALSE)
  endif()
    #set the result
  if(${category} AND NOT ${prec_value})
    set(${res} TRUE PARENT_SCOPE)
  else()
    set(${res} FALSE PARENT_SCOPE)
  endif()
endfunction(is_rising_edge)

#Tells if category has changed to become false
function(is_falling_edge category res)
  #if category_prec is not defined, take the init value
  if(DEFINED ${category}_prec)
    set(prec_value ${category}_prec)
  elseif(${category} EQUAL "all")
    set(prec_value TRUE)
  else()
    set(prec_value FALSE)
  endif()
    #set the result
  if(NOT ${category} AND ${prec_value})
    set(${res} TRUE PARENT_SCOPE)
  else()
    set(${res} FALSE PARENT_SCOPE)
  endif()
endfunction(is_falling_edge)

  macro(polyhedron_demo_plugin plugin_name plugin_implementation_base_name)
    set (optional_arguments "${ARGN}")
    set(CATEGORIES "")
    foreach( category ${optional_arguments})
      if("${category}" MATCHES "(CATEGORY\\-PLUGINS_)+")
        list(APPEND CATEGORIES ${category})
        list(REMOVE_ITEM optional_arguments ${category})
      else()
        break()
      endif()
    endforeach()

    list_split(option ARGN_TAIL ${optional_arguments} )
    if(NOT ${option} STREQUAL "EXCLUDE_FROM_ALL")
      if(NOT ${option} STREQUAL "NO_MOC")
        set(other_sources ${optional_arguments})
        set(option "")
      else()
        set(other_sources ${ARGN_TAIL})
      endif()
    else()
      set(other_sources ${ARGN_TAIL})
    endif()
    if("${option}" STREQUAL "NO_MOC")
      set(option "")
      set(moc_file_name "")
    else()
      set(moc_file_name ${plugin_implementation_base_name}.moc )
      qt5_generate_moc( ${plugin_implementation_base_name}.cpp "${CMAKE_CURRENT_BINARY_DIR}/${moc_file_name}" )
      add_file_dependencies( ${moc_file_name} "${CMAKE_CURRENT_SOURCE_DIR}/${plugin_implementation_base_name}.cpp" )
    endif()
    add_library(${plugin_name} MODULE ${option} ${moc_file_name} ${plugin_implementation_base_name}.cpp ${other_sources})
    qt5_use_modules(${plugin_name} Widgets Script OpenGL Gui Xml )
    #default initialization value is true as all is true.
    set(SINGLE-PLUGIN_${plugin_name} TRUE CACHE BOOL "Build ${plugin_name} ?")
    #check all categories associated to the plugin. If one has just been cchanged to be true, force set the plugin.
    #If one has recently been changed to be false, force unset the plugin.
    foreach(cat ${CATEGORIES}
        "CATEGORY-PLUGINS_all")
      add_to_cached_list( ${cat}_plugins ${plugin_name} )

      set(rising_edge FALSE)
      set(falling_edge FALSE)
      is_rising_edge(${cat} rising_edge)
      is_falling_edge(${cat} falling_edge)
      if(${cat} AND ${rising_edge})
        set(SINGLE-PLUGIN_${plugin_name} TRUE CACHE BOOL "Build ${plugin_name} ?" FORCE)
        break()
      else()
        set(SINGLE-PLUGIN_${plugin_name} TRUE CACHE BOOL "Build ${plugin_name} ?")
      endif()
      if(NOT ${cat} AND ${falling_edge})
        set(SINGLE-PLUGIN_${plugin_name} FALSE CACHE BOOL "Build ${plugin_name} ?" FORCE)
      endif()
    endforeach()
    if(${plugin_name} STREQUAL "camera_positions_plugin")
      set(SINGLE-PLUGIN_${plugin_name} TRUE CACHE BOOL "Build ${plugin_name} ?")
    endif()
    if(NOT SINGLE-PLUGIN_${plugin_name})
      set_target_properties(${plugin_name} PROPERTIES EXCLUDE_FROM_ALL 1 EXCLUDE_FROM_DEFAULT_BUILD 1)
    endif()
    set_property(TARGET ${plugin_name}
      PROPERTY LIBRARY_OUTPUT_DIRECTORY
      "${CGAL_POLYHEDRON_DEMO_PLUGINS_DIR}")

    add_to_cached_list( CGAL_EXECUTABLE_TARGETS ${plugin_name} )
    # Link with Qt
    target_link_libraries( ${plugin_name} ${QT_LIBRARIES} )
    # Link with the demo_framework
    if(TARGET demo_framework)
      target_link_libraries( ${plugin_name} demo_framework)
    else()
      target_link_libraries( ${plugin_name} Polyhedron_demo_framework)
    endif()
    # Link with CGAL
    target_link_libraries( ${plugin_name} ${CGAL_LIBRARIES} ${CGAL_3RD_PARTY_LIBRARIES} )
    if(TARGET Polyhedron_3)
      add_dependencies( ${plugin_name} Polyhedron_3 )
    endif()
  endmacro(polyhedron_demo_plugin)

